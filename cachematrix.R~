##  pair of functions that cache inverse of matrix

## create matrix that can cache its inverse

makeCacheMatrix <- function(x = matrix()) {
          i <-NULL

     ## method for setting the matrix
     set <- function(matrix)
      {
         m <<-matrix
         i <<-NULL
      }

    ## method for getting the matrix
    get <-function()
    {
       m
    }

    ## method for setting the inverse of matrix
    setInverse <-function(inverse)
    {
      i <<-inverse
    }
    ## method gor getting the inverse of matrix
    getInverse <-function()
    {
     i
    }

    ## list of methods to return
    list(set = set,get = get,setInverse =  setInverse,getInverse = getInverse)
}


## Compute the inverse of the matrix if not already cached
## else look up the cache and pick result from it

cacheSolve <- function(x, ...) 
{
        ## Return a matrix that is the inverse of 'x'
   m <- x$getInverse()  

  ## return inverse if already set
   if(!is.null(m))
   {
     message("getting cached data")
     return(m)
   }   

  ## get matrix from our object
   data <- x$get()

 ## calculating inverse using matrix multiplication
  m <-solve(data)%*% data

  ## set the inverse 
  x$setInverse(m)
 
  ## return the matrix
   m
}
